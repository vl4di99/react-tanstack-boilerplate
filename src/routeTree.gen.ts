/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authLayoutRouteImport } from './routes/(auth)/layout'
import { Route as appLayoutRouteImport } from './routes/(app)/layout'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'

const authLayoutRoute = authLayoutRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appLayoutRoute = appLayoutRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appLayoutRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/login': typeof authLoginIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '/login': typeof authLoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appLayoutRouteWithChildren
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(app)/': typeof appIndexRoute
  '/(auth)/login/': typeof authLoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login'
  id: '__root__' | '/(app)' | '/(auth)' | '/(app)/' | '/(auth)/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appLayoutRoute: typeof appLayoutRouteWithChildren
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authLayoutRoute
    }
  }
}

interface appLayoutRouteChildren {
  appIndexRoute: typeof appIndexRoute
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appIndexRoute: appIndexRoute,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface authLayoutRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appLayoutRoute: appLayoutRouteWithChildren,
  authLayoutRoute: authLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
